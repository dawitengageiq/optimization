{"version":3,"sources":["diffview.js"],"names":["diffview","buildView","params","celt","name","clazz","e","document","createElement","className","telt","text","appendChild","createTextNode","ctelt","addCells","row","tidx","tend","textLines","change","toString","replace","addCellsInline","tidx2","baseTextLines","newTextLines","opcodes","baseTextName","newTextName","contextSize","inline","viewType","tdata","node","node2","rows","idx","length","code","b","be","n","ne","rowcnt","Math","max","toprows","botrows","i","jump","push","setAttribute","hasOwnProperty"],"mappings":"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","file":"diffview.min.js","sourcesContent":["/*\r\nThis is part of jsdifflib v1.0. <http://github.com/cemerick/jsdifflib>\r\n\r\nCopyright 2007 - 2011 Chas Emerick <cemerick@snowtide.com>. All rights reserved.\r\n\r\nRedistribution and use in source and binary forms, with or without modification, are\r\npermitted provided that the following conditions are met:\r\n\r\n   1. Redistributions of source code must retain the above copyright notice, this list of\r\n      conditions and the following disclaimer.\r\n\r\n   2. Redistributions in binary form must reproduce the above copyright notice, this list\r\n      of conditions and the following disclaimer in the documentation and/or other materials\r\n      provided with the distribution.\r\n\r\nTHIS SOFTWARE IS PROVIDED BY Chas Emerick ``AS IS'' AND ANY EXPRESS OR IMPLIED\r\nWARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\r\nFITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL Chas Emerick OR\r\nCONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\nCONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\r\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\r\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\r\nNEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF\r\nADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n\r\nThe views and conclusions contained in the software and documentation are those of the\r\nauthors and should not be interpreted as representing official policies, either expressed\r\nor implied, of Chas Emerick.\r\n*/\r\nvar diffview = {\r\n\t/**\r\n\t * Builds and returns a visual diff view.  The single parameter, `params', should contain\r\n\t * the following values:\r\n\t *\r\n\t * - baseTextLines: the array of strings that was used as the base text input to SequenceMatcher\r\n\t * - newTextLines: the array of strings that was used as the new text input to SequenceMatcher\r\n\t * - opcodes: the array of arrays returned by SequenceMatcher.get_opcodes()\r\n\t * - baseTextName: the title to be displayed above the base text listing in the diff view; defaults\r\n\t *\t   to \"Base Text\"\r\n\t * - newTextName: the title to be displayed above the new text listing in the diff view; defaults\r\n\t *\t   to \"New Text\"\r\n\t * - contextSize: the number of lines of context to show around differences; by default, all lines\r\n\t *\t   are shown\r\n\t * - viewType: if 0, a side-by-side diff view is generated (default); if 1, an inline diff view is\r\n\t *\t   generated\r\n\t */\r\n\tbuildView: function (params) {\r\n\t\tvar baseTextLines = params.baseTextLines;\r\n\t\tvar newTextLines = params.newTextLines;\r\n\t\tvar opcodes = params.opcodes;\r\n\t\tvar baseTextName = params.baseTextName ? params.baseTextName : \"Base Text\";\r\n\t\tvar newTextName = params.newTextName ? params.newTextName : \"New Text\";\r\n\t\tvar contextSize = params.contextSize;\r\n\t\tvar inline = (params.viewType == 0 || params.viewType == 1) ? params.viewType : 0;\r\n\r\n\t\tif (baseTextLines == null)\r\n\t\t\tthrow \"Cannot build diff view; baseTextLines is not defined.\";\r\n\t\tif (newTextLines == null)\r\n\t\t\tthrow \"Cannot build diff view; newTextLines is not defined.\";\r\n\t\tif (!opcodes)\r\n\t\t\tthrow \"Canno build diff view; opcodes is not defined.\";\r\n\t\t\r\n\t\tfunction celt (name, clazz) {\r\n\t\t\tvar e = document.createElement(name);\r\n\t\t\te.className = clazz;\r\n\t\t\treturn e;\r\n\t\t}\r\n\t\t\r\n\t\tfunction telt (name, text) {\r\n\t\t\tvar e = document.createElement(name);\r\n\t\t\te.appendChild(document.createTextNode(text));\r\n\t\t\treturn e;\r\n\t\t}\r\n\t\t\r\n\t\tfunction ctelt (name, clazz, text) {\r\n\t\t\tvar e = document.createElement(name);\r\n\t\t\te.className = clazz;\r\n\t\t\te.appendChild(document.createTextNode(text));\r\n\t\t\treturn e;\r\n\t\t}\r\n\t\r\n\t\tvar tdata = document.createElement(\"thead\");\r\n\t\tvar node = document.createElement(\"tr\");\r\n\t\ttdata.appendChild(node);\r\n\t\tif (inline) {\r\n\t\t\tnode.appendChild(document.createElement(\"th\"));\r\n\t\t\tnode.appendChild(document.createElement(\"th\"));\r\n\t\t\tnode.appendChild(ctelt(\"th\", \"texttitle\", baseTextName + \" vs. \" + newTextName));\r\n\t\t} else {\r\n\t\t\tnode.appendChild(document.createElement(\"th\"));\r\n\t\t\tnode.appendChild(ctelt(\"th\", \"texttitle\", baseTextName));\r\n\t\t\tnode.appendChild(document.createElement(\"th\"));\r\n\t\t\tnode.appendChild(ctelt(\"th\", \"texttitle\", newTextName));\r\n\t\t}\r\n\t\ttdata = [tdata];\r\n\t\t\r\n\t\tvar rows = [];\r\n\t\tvar node2;\r\n\t\t\r\n\t\t/**\r\n\t\t * Adds two cells to the given row; if the given row corresponds to a real\r\n\t\t * line number (based on the line index tidx and the endpoint of the \r\n\t\t * range in question tend), then the cells will contain the line number\r\n\t\t * and the line of text from textLines at position tidx (with the class of\r\n\t\t * the second cell set to the name of the change represented), and tidx + 1 will\r\n\t\t * be returned.\t Otherwise, tidx is returned, and two empty cells are added\r\n\t\t * to the given row.\r\n\t\t */\r\n\t\tfunction addCells (row, tidx, tend, textLines, change) {\r\n\t\t\tif (tidx < tend) {\r\n\t\t\t\trow.appendChild(telt(\"th\", (tidx + 1).toString()));\r\n\t\t\t\trow.appendChild(ctelt(\"td\", change, textLines[tidx].replace(/\\t/g, \"\\u00a0\\u00a0\\u00a0\\u00a0\")));\r\n\t\t\t\treturn tidx + 1;\r\n\t\t\t} else {\r\n\t\t\t\trow.appendChild(document.createElement(\"th\"));\r\n\t\t\t\trow.appendChild(celt(\"td\", \"empty\"));\r\n\t\t\t\treturn tidx;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tfunction addCellsInline (row, tidx, tidx2, textLines, change) {\r\n\t\t\trow.appendChild(telt(\"th\", tidx == null ? \"\" : (tidx + 1).toString()));\r\n\t\t\trow.appendChild(telt(\"th\", tidx2 == null ? \"\" : (tidx2 + 1).toString()));\r\n\t\t\trow.appendChild(ctelt(\"td\", change, textLines[tidx != null ? tidx : tidx2].replace(/\\t/g, \"\\u00a0\\u00a0\\u00a0\\u00a0\")));\r\n\t\t}\r\n\t\t\r\n\t\tfor (var idx = 0; idx < opcodes.length; idx++) {\r\n\t\t\tcode = opcodes[idx];\r\n\t\t\tchange = code[0];\r\n\t\t\tvar b = code[1];\r\n\t\t\tvar be = code[2];\r\n\t\t\tvar n = code[3];\r\n\t\t\tvar ne = code[4];\r\n\t\t\tvar rowcnt = Math.max(be - b, ne - n);\r\n\t\t\tvar toprows = [];\r\n\t\t\tvar botrows = [];\r\n\t\t\tfor (var i = 0; i < rowcnt; i++) {\r\n\t\t\t\t// jump ahead if we've alredy provided leading context or if this is the first range\r\n\t\t\t\tif (contextSize && opcodes.length > 1 && ((idx > 0 && i == contextSize) || (idx == 0 && i == 0)) && change==\"equal\") {\r\n\t\t\t\t\tvar jump = rowcnt - ((idx == 0 ? 1 : 2) * contextSize);\r\n\t\t\t\t\tif (jump > 1) {\r\n\t\t\t\t\t\ttoprows.push(node = document.createElement(\"tr\"));\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tb += jump;\r\n\t\t\t\t\t\tn += jump;\r\n\t\t\t\t\t\ti += jump - 1;\r\n\t\t\t\t\t\tnode.appendChild(telt(\"th\", \"...\"));\r\n\t\t\t\t\t\tif (!inline) node.appendChild(ctelt(\"td\", \"skip\", \"\"));\r\n\t\t\t\t\t\tnode.appendChild(telt(\"th\", \"...\"));\r\n\t\t\t\t\t\tnode.appendChild(ctelt(\"td\", \"skip\", \"\"));\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t// skip last lines if they're all equal\r\n\t\t\t\t\t\tif (idx + 1 == opcodes.length) {\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\ttoprows.push(node = document.createElement(\"tr\"));\r\n\t\t\t\tif (inline) {\r\n\t\t\t\t\tif (change == \"insert\") {\r\n\t\t\t\t\t\taddCellsInline(node, null, n++, newTextLines, change);\r\n\t\t\t\t\t} else if (change == \"replace\") {\r\n\t\t\t\t\t\tbotrows.push(node2 = document.createElement(\"tr\"));\r\n\t\t\t\t\t\tif (b < be) addCellsInline(node, b++, null, baseTextLines, \"delete\");\r\n\t\t\t\t\t\tif (n < ne) addCellsInline(node2, null, n++, newTextLines, \"insert\");\r\n\t\t\t\t\t} else if (change == \"delete\") {\r\n\t\t\t\t\t\taddCellsInline(node, b++, null, baseTextLines, change);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// equal\r\n\t\t\t\t\t\taddCellsInline(node, b++, n++, baseTextLines, change);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tb = addCells(node, b, be, baseTextLines, change);\r\n\t\t\t\t\tn = addCells(node, n, ne, newTextLines, change);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfor (var i = 0; i < toprows.length; i++) rows.push(toprows[i]);\r\n\t\t\tfor (var i = 0; i < botrows.length; i++) rows.push(botrows[i]);\r\n\t\t}\r\n\t\t\r\n\t\trows.push(node = ctelt(\"th\", \"author\", \"diff view generated by \"));\r\n\t\tnode.setAttribute(\"colspan\", inline ? 3 : 4);\r\n\t\tnode.appendChild(node2 = telt(\"a\", \"jsdifflib\"));\r\n\t\tnode2.setAttribute(\"href\", \"http://github.com/cemerick/jsdifflib\");\r\n\t\t\r\n\t\ttdata.push(node = document.createElement(\"tbody\"));\r\n\t\tfor (var idx in rows) rows.hasOwnProperty(idx) && node.appendChild(rows[idx]);\r\n\t\t\r\n\t\tnode = celt(\"table\", \"diff\" + (inline ? \" inlinediff\" : \"\"));\r\n\t\tfor (var idx in tdata) tdata.hasOwnProperty(idx) && node.appendChild(tdata[idx]);\r\n\t\treturn node;\r\n\t}\r\n};\r\n\r\n"]}